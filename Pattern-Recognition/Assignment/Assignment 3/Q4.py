# -*- coding: utf-8 -*-
"""PR_Assignment3_Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uLZq_Fzbfh4zxaWyMRvOblpkfoaDNYg5

# **Q4. Eigenfaces - Face classification using PCA (40 classes)**
> **a) Use the following "face.csv" file to classify the faces of 40 different people.**

> **b) Do not use in-built function for implementing PCA.**

> **c) Use appropriate classifier taught in class (any classification algorithm taught in class like Bayes classifier, minimum distance clasifier, and so on)**

> **d) Refer to the following link for a description of the dataset**

> **https://towardsdatascience.com/eigenfaces-face-classification-in-python-7b8d2af3d3ea**
"""

import numpy as np
import pandas as pd

"""
from google.colab import files
uploaded = files.upload()
"""

df = pd.read_csv('face.csv')

print("ACTUAL DATASET\n--------------")
print(df)
print('\n-------------------------------------------------------------------------------------------------------------------')

df.drop(df.columns[-1], axis = 1, inplace = True)

train_data_set = df.iloc[2:10]

for i in range(10, 400, 10):
  train_data_set = train_data_set.append(df.iloc[i + 2:i + 10], ignore_index = True)

print("TRAIN DATASET WITH DIMENSION = 4096\n-----------------------------------")
print(train_data_set)
print('\n-------------------------------------------------------------------------------------------------------------------')

test_data_set = df.iloc[0:2]

for i in range(10, 400, 10):
  test_data_set = test_data_set.append(df.iloc[i:i + 2], ignore_index = True)

print("TEST DATASET WITH DIMENSION = 4096\n----------------------------------")
print(test_data_set)
print('\n-------------------------------------------------------------------------------------------------------------------')

train_data_set = np.transpose(train_data_set)

test_data_set = np.transpose(test_data_set)

d = 4096

print("DIMENSION OF FEATURE VECTORS\n----------------------------")
print("d = " + str(d))
print('\n-------------------------------------------------------------------------------------------------------------------')

def mean_PCA(train_data_set):
    train_data_set_mean = np.mean(train_data_set, axis = 1)
    return np.array(train_data_set_mean)

train_data_set_mean = mean_PCA(train_data_set)

print("MEAN OF TRAIN DATASET\n---------------------")
print(train_data_set_mean)
print('\n-------------------------------------------------------------------------------------------------------------------')

train_data_set_covariance_matrix = np.cov(train_data_set)

print("COVARIANCE MATRIX OF TRAIN DATASET\n----------------------------------")
print(train_data_set_covariance_matrix)
print('\n-------------------------------------------------------------------------------------------------------------------')

eigen_values, eigen_vectors = np.linalg.eigh(train_data_set_covariance_matrix)

eigen_pairs = [(np.abs(eigen_values[i]), eigen_vectors[:, i]) for i in range(len(eigen_values))]

eigen_pairs.sort(key = lambda x : x[0], reverse = True)

print("EIGEN VALUES IN INCREASING ORDER\n--------------------------------")
for i in eigen_pairs:
    print(i[0])
print('\n-------------------------------------------------------------------------------------------------------------------')

def get_reduced_dimension(eigen_pairs, eigen_values, percent):
    eigen_values_sum = np.sum(eigen_values)
    eigen_values_sum_reduced_dimension = percent * eigen_values_sum / 100
    sum = 0.0
    count = 0
    for i in eigen_pairs:
        if(sum < eigen_values_sum_reduced_dimension):
            sum += i[0]
            count += 1
        else:
            break
    return count

d_prime = get_reduced_dimension(eigen_pairs, eigen_values, 95)

print("REDUCED DIMENSION OF FEATURE VECTORS\n------------------------------------")
print("d' = " + str(d_prime))
print('\n-------------------------------------------------------------------------------------------------------------------')

matrix_w = eigen_pairs[0][1].reshape(d, 1)

for i in range(1, d_prime):
    matrix_w = np.hstack((matrix_w, eigen_pairs[i][1].reshape(d, 1)))

print("REDUCED DIMENSION MATRIX W\n--------------------------")
print(matrix_w)
print('\n-------------------------------------------------------------------------------------------------------------------')

train_data_set_transformed = np.transpose(matrix_w.T.dot(train_data_set))

print("TRAIN DATASET WITH DIMENSION = " + str(d_prime) + "\n----------------------------------")
print(train_data_set_transformed)
print('\n-------------------------------------------------------------------------------------------------------------------')

test_data_set_transformed = np.transpose(matrix_w.T.dot(test_data_set))

print("TEST DATASET WITH DIMENSION = " + str(d_prime) + "\n--------------------------------")
print(test_data_set_transformed)
print('\n-------------------------------------------------------------------------------------------------------------------')

"""# **Code for Plotting The Graphs**

Graph 1 : X-axis - No. of Dimension; Y-axis - Eigen Values

Graph 2 : X-axis - No. of Dimension; Y-axis - Variance
"""

import matplotlib.pyplot as plt

plot1 = plt.figure(1)
plt.scatter([i for i in range(d)], eigen_values, label = 'Eigen Values', color = 'blue')
plt.plot([i for i in range(d)], eigen_values, linestyle = '-', color = 'green')

plt.title('Eigen Value corresponding to each Dimension', fontweight = 'bold')
plt.xlabel('No. of Dimensions', fontweight = 'bold')
plt.ylabel('Eigen Values', fontweight = 'bold')

plt.axis([-1, d, -0.01, np.max(eigen_values) + 0.01])
plt.legend(loc = 'upper right')

plot2 = plt.figure(2)

x_values = []
y_values = []

x_values.append(0)
y_values.append(0.0)

sum = 0.0
total_sum = np.sum(eigen_values)

for i in range(d):
    sum += eigen_pairs[i][0]
    x_values.append(i + 1)
    y_values.append(sum / total_sum)

fp_num = np.linspace(0.0, 1.0, 1000)

plt.plot(x_values, y_values, color = 'blue')
plt.plot([i for i in range(d)], [0.95 for i in range(d)], linestyle = '-', label = '95' + str('%') + ' of Variance', color = 'red')
plt.plot([d_prime for i in range(len(fp_num))], fp_num, linestyle = '-', label = 'd\' = ' + str(d_prime), color = 'green')

plt.axis([0, d, 0.0, 1.05])

plt.title('Variance vs Dimension', fontweight = 'bold')
plt.xlabel('No. of Dimensions', fontweight = 'bold')
plt.ylabel('Variance', fontweight = 'bold')

plt.legend(loc = 'lower right')
plt.show()

"""# **Bayes Classifier Code**"""

from sklearn.naive_bayes import GaussianNB
from sklearn import metrics

"""# **Bayes Classifier with dimesion = 4096**"""

train_data_set = np.transpose(train_data_set)
test_data_set = np.transpose(test_data_set)

X_train = train_data_set
y_train = []

for i in range(40):
    for j in range(int(len(train_data_set)/ 40)):
        y_train.append(str(i))

X_test = test_data_set
y_test = []

for i in range(40):
    for j in range(int(len(test_data_set)/ 40)):
        y_test.append(str(i))

gnb = GaussianNB()

gnb.fit(X_train, y_train)

y_pred = gnb.predict(X_test)

overall_accuracy = metrics.accuracy_score(y_test, y_pred) * 100

print("BAYES CLASSIFIER - DIMENSION = " + str(d) + "\n-----------------------------------")
print("Actual Classification = 0")
print("Bayes Classifier : " + str(y_pred[0:2]))
print('')
print("Actual Classification = 1")
print("Bayes Classifier : " + str(y_pred[2:4]))
print('')
print("Actual Classification = 2")
print("Bayes Classifier : " + str(y_pred[4:6]))
print('')
print("Actual Classification = 3")
print("Bayes Classifier : " + str(y_pred[6:8]))
print('')
print("Actual Classification = 4")
print("Bayes Classifier : " + str(y_pred[8:10]))
print('')
print("Actual Classification = 5")
print("Bayes Classifier : " + str(y_pred[10:12]))
print('')
print("Actual Classification = 6")
print("Bayes Classifier : " + str(y_pred[12:14]))
print('')
print("Actual Classification = 7")
print("Bayes Classifier : " + str(y_pred[14:16]))
print('')
print("Actual Classification = 8")
print("Bayes Classifier : " + str(y_pred[16:18]))
print('')
print("Actual Classification = 9")
print("Bayes Classifier : " + str(y_pred[18:20]))
print('')
print("Actual Classification = 10")
print("Bayes Classifier : " + str(y_pred[20:22]))
print('')
print("Actual Classification = 11")
print("Bayes Classifier : " + str(y_pred[22:24]))
print('')
print("Actual Classification = 12")
print("Bayes Classifier : " + str(y_pred[24:26]))
print('')
print("Actual Classification = 13")
print("Bayes Classifier : " + str(y_pred[26:28]))
print('')
print("Actual Classification = 14")
print("Bayes Classifier : " + str(y_pred[28:30]))
print('')
print("Actual Classification = 15")
print("Bayes Classifier : " + str(y_pred[30:32]))
print('')
print("Actual Classification = 16")
print("Bayes Classifier : " + str(y_pred[32:34]))
print('')
print("Actual Classification = 17")
print("Bayes Classifier : " + str(y_pred[34:36]))
print('')
print("Actual Classification = 18")
print("Bayes Classifier : " + str(y_pred[36:38]))
print('')
print("Actual Classification = 19")
print("Bayes Classifier : " + str(y_pred[38:40]))
print('')
print("Actual Classification = 20")
print("Bayes Classifier : " + str(y_pred[40:42]))
print('')
print("Actual Classification = 21")
print("Bayes Classifier : " + str(y_pred[42:44]))
print('')
print("Actual Classification = 22")
print("Bayes Classifier : " + str(y_pred[44:46]))
print('')
print("Actual Classification = 23")
print("Bayes Classifier : " + str(y_pred[46:48]))
print('')
print("Actual Classification = 24")
print("Bayes Classifier : " + str(y_pred[48:50]))
print('')
print("Actual Classification = 25")
print("Bayes Classifier : " + str(y_pred[50:52]))
print('')
print("Actual Classification = 26")
print("Bayes Classifier : " + str(y_pred[52:54]))
print('')
print("Actual Classification = 27")
print("Bayes Classifier : " + str(y_pred[54:56]))
print('')
print("Actual Classification = 28")
print("Bayes Classifier : " + str(y_pred[56:58]))
print('')
print("Actual Classification = 29")
print("Bayes Classifier : " + str(y_pred[58:60]))
print('')
print("Actual Classification = 30")
print("Bayes Classifier : " + str(y_pred[60:62]))
print('')
print("Actual Classification = 31")
print("Bayes Classifier : " + str(y_pred[62:64]))
print('')
print("Actual Classification = 32")
print("Bayes Classifier : " + str(y_pred[64:66]))
print('')
print("Actual Classification = 33")
print("Bayes Classifier : " + str(y_pred[66:68]))
print('')
print("Actual Classification = 34")
print("Bayes Classifier : " + str(y_pred[68:70]))
print('')
print("Actual Classification = 35")
print("Bayes Classifier : " + str(y_pred[70:72]))
print('')
print("Actual Classification = 36")
print("Bayes Classifier : " + str(y_pred[72:74]))
print('')
print("Actual Classification = 37")
print("Bayes Classifier : " + str(y_pred[74:76]))
print('')
print("Actual Classification = 38")
print("Bayes Classifier : " + str(y_pred[76:78]))
print('')
print("Actual Classification = 39")
print("Bayes Classifier : " + str(y_pred[78:80]))
print('')

print("\nOverall Accuracy = " + str(overall_accuracy) + "%\n")
print('-------------------------------------------------------------------------------------------------------------------')

"""# **Bayes Classifier with dimesion = 111**"""

X_train_reduced_dimension = train_data_set_transformed
y_train_reduced_dimension = []

for i in range(40):
    for j in range(int(len(train_data_set_transformed)/ 40)):
        y_train_reduced_dimension.append(str(i))

X_test_reduced_dimension = test_data_set_transformed
y_test_reduced_dimension = []

for i in range(40):
    for j in range(int(len(test_data_set_transformed)/ 40)):
        y_test_reduced_dimension.append(str(i))

gnb_reduced_dimension = GaussianNB()

gnb_reduced_dimension.fit(X_train_reduced_dimension, y_train_reduced_dimension)

y_pred_reduced_dimension = gnb_reduced_dimension.predict(X_test_reduced_dimension)

overall_accuracy_reduced_dimension = metrics.accuracy_score(y_test_reduced_dimension, y_pred_reduced_dimension) * 100

print("BAYES CLASSIFIER - DIMENSION = " + str(d_prime) + "\n----------------------------------")
print("Actual Classification = 0")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[0:2]))
print('')
print("Actual Classification = 1")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[2:4]))
print('')
print("Actual Classification = 2")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[4:6]))
print('')
print("Actual Classification = 3")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[6:8]))
print('')
print("Actual Classification = 4")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[8:10]))
print('')
print("Actual Classification = 5")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[10:12]))
print('')
print("Actual Classification = 6")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[12:14]))
print('')
print("Actual Classification = 7")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[14:16]))
print('')
print("Actual Classification = 8")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[16:18]))
print('')
print("Actual Classification = 9")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[18:20]))
print('')
print("Actual Classification = 10")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[20:22]))
print('')
print("Actual Classification = 11")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[22:24]))
print('')
print("Actual Classification = 12")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[24:26]))
print('')
print("Actual Classification = 13")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[26:28]))
print('')
print("Actual Classification = 14")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[28:30]))
print('')
print("Actual Classification = 15")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[30:32]))
print('')
print("Actual Classification = 16")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[32:34]))
print('')
print("Actual Classification = 17")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[34:36]))
print('')
print("Actual Classification = 18")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[36:38]))
print('')
print("Actual Classification = 19")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[38:40]))
print('')
print("Actual Classification = 20")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[40:42]))
print('')
print("Actual Classification = 21")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[42:44]))
print('')
print("Actual Classification = 22")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[44:46]))
print('')
print("Actual Classification = 23")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[46:48]))
print('')
print("Actual Classification = 24")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[48:50]))
print('')
print("Actual Classification = 25")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[50:52]))
print('')
print("Actual Classification = 26")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[52:54]))
print('')
print("Actual Classification = 27")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[54:56]))
print('')
print("Actual Classification = 28")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[56:58]))
print('')
print("Actual Classification = 29")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[58:60]))
print('')
print("Actual Classification = 30")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[60:62]))
print('')
print("Actual Classification = 31")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[62:64]))
print('')
print("Actual Classification = 32")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[64:66]))
print('')
print("Actual Classification = 33")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[66:68]))
print('')
print("Actual Classification = 34")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[68:70]))
print('')
print("Actual Classification = 35")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[70:72]))
print('')
print("Actual Classification = 36")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[72:74]))
print('')
print("Actual Classification = 37")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[74:76]))
print('')
print("Actual Classification = 38")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[76:78]))
print('')
print("Actual Classification = 39")
print("Bayes Classifier : " + str(y_pred_reduced_dimension[78:80]))
print('')

print("\nOverall Accuracy = " + str(overall_accuracy_reduced_dimension) + "%\n")
print('-------------------------------------------------------------------------------------------------------------------')