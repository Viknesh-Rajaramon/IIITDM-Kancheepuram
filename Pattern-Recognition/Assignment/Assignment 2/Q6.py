# -*- coding: utf-8 -*-
"""Q6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K3SewSV94xWO5Mb2tq0uW-yJWCM_nxky

# **Q6. Consider the 128- dimensional feature vectors given in the “face feature vectors.csv” file. Use this information to design and implement a Bayes Classifier.**
> **Dataset Specifications:**
> > **Number of classes = 2 ( labelled as “male” and “female”)**

> > **Samples from “1 to 400” belongs to class “male”**

> > **Samples from “401 to 800” belongs to class “female”**

> > **Number of samples per class = 400”**

> **Use the following information to design classifier:**
> > **Number of test feature vectors ( first 5 in each class) = 5**

> > **Number of training feature vectors ( remaining 395 in each class) = 395**

> > **Number of dimensions = 128**
"""

import pandas as pd
import numpy as np

df = pd.read_csv('face feature vectors.csv')

df.drop(df.columns[[0]], axis = 1, inplace = True)

df = df * 1000

train_data_set1 = df.iloc[5:399]
test_data_set1 = df.iloc[0:5]

train_data_set2 = df.iloc[404:800]
test_data_set2 = df.iloc[399:404]

d = 128

print("Dimension of Feature Vectors = " + str(d))

class_1_probability = 1/2
class_2_probability = 1/2

print('----------------------------------------------------------------------------------')
print("PROBABILITY - P(\u03C9)\n------------------")
print("Class \u03C9\u2081 = " + str(class_1_probability))
print("Class \u03C9\u2082 = " + str(class_2_probability))
print('')
print('----------------------------------------------------------------------------------')

def find_mean(data):
    temp = data.drop(['Unnamed: 1'], axis = 1)
    ans = temp.mean(axis = 0)
    return np.array(ans)

class_1_mean = find_mean(train_data_set1)
class_2_mean = find_mean(train_data_set2)

print("MEAN - \u03BC\n--------")
print("Class \u03C9\u2081 = " + str(class_1_mean))
print("Class \u03C9\u2082 = " + str(class_2_mean))
print('')
print('----------------------------------------------------------------------------------')

class_1_covariance_matrix = train_data_set1.cov()
class_2_covariance_matrix = train_data_set2.cov()

print("COVARIANCE - \u03A3\n--------------")
print("Class \u03C9\u2081 :\n" + str(class_1_covariance_matrix.values))
print('')
print("Class \u03C9\u2082 :\n" + str(class_2_covariance_matrix.values))
print('')
print('----------------------------------------------------------------------------------')

# Function to find P(X/w) for Multivariant case
def class_conditional_probability(X, d, mean, covariance_matrix):
    temp_1 = np.subtract(X, mean)
    temp_2 = (-1/2) * (np.transpose(temp_1)) @ (np.linalg.inv(covariance_matrix)) @ (temp_1)
    temp_3 = (2*np.pi)**(d/2)
    temp_4 = (np.linalg.det(covariance_matrix))**(1/2)
    temp_5 = temp_3 * temp_4
    return (np.exp(temp_2)/temp_5)

# Function to classify the test data into one of the classes
def get_variety_for_test_data(test_data, class_1_mean, class_2_mean, class_1_covariance_matrix, class_2_covariance_matrix):
    temp = test_data.drop(['Unnamed: 1'], axis = 1)
    variety = ['Male', 'Female']
    test_data_variety = []

    for X in temp[:].values:
        p_x_class_1 = class_conditional_probability(X, d, class_1_mean, class_1_covariance_matrix)
        p_x_class_2 = class_conditional_probability(X, d, class_2_mean, class_2_covariance_matrix)
        
        maximum_probability = max(p_x_class_1, p_x_class_2)

        if(maximum_probability == p_x_class_1):
            test_data_variety.append(variety[0])
        else:
            test_data_variety.append(variety[1])
    return test_data_variety

test_data_set1_variety = get_variety_for_test_data(test_data_set1, class_1_mean, class_2_mean, class_1_covariance_matrix, class_2_covariance_matrix)
test_data_set2_variety = get_variety_for_test_data(test_data_set2, class_1_mean, class_2_mean, class_1_covariance_matrix, class_2_covariance_matrix)

print("CLASSIFICATION AS PER BAYES CLASSIFIER AND ACTUAL CLASSIFICATION\n----------------------------------------------------------------")
print("Actual Classification = Male")
print("Bayes Classifier : " + str(test_data_set1_variety))
print('')
print("Actual Classification = Female")
print("Bayes Classifier : " + str(test_data_set2_variety))
print('')
print('----------------------------------------------------------------------------------')

# Function to get accuracy for separate classes
def get_accuracy_class(bayes_classifier, actual_classification):
    count = 0
    for classification in bayes_classifier:
        if(classification == actual_classification):
            count += 1
    return count

test_data_set1_accuracy = (get_accuracy_class(test_data_set1_variety, 'Male')/len(test_data_set1))
test_data_set2_accuracy = (get_accuracy_class(test_data_set2_variety, 'Female')/len(test_data_set2))

print("ACCURACY OF MODEL\n-----------------")
print("Class \u03C9\u2081 = " + str("{:.00%}".format(test_data_set1_accuracy)))
print('')
print("Class \u03C9\u2082 = " + str("{:.00%}".format(test_data_set2_accuracy)))
print('')
print('----------------------------------------------------------------------------------')

overall_accuracy = (test_data_set1_accuracy + test_data_set2_accuracy) / 2

print("\nOverall Accuracy = " + str("{:.00%}".format(overall_accuracy)) + "\n")
