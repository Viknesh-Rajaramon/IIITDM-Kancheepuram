# -*- coding: utf-8 -*-
"""Q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hPNh_0dG8ZT8onMvyyRTmUiiQYQWqGcl

# **Q5. Use only two features: Petal Length and Petal Width, for 3 class classification and draw the decision boundary between them (2 dimension, 3 regions also called as multi-class problem)**
"""

import pandas as pd
import numpy as np

df = pd.read_csv('Iris_dataset.csv')

df = df.drop(['sepal.length', 'sepal.width'], axis = 1)

class_1 = df.loc[df.variety == 'Setosa']
class_2 = df.loc[df.variety == 'Versicolor']
class_3 = df.loc[df.variety == 'Virginica']

print('-----------------------------------------------------------------------------')
print("Class Variety\n-------------")
print("Class \u03C9\u2081 = Setosa")
print("Class \u03C9\u2082 = Versicolor")
print("Class \u03C9\u2083 = Virginica")
print('')
print('-------------------------------------------------------------------------------------------------------------------------------------------------------------------------')

# Probability of Class 1 and Class 2
class_1_probability = 1/3
class_2_probability = 1/3
class_3_probability = 1/3

print("PROBABILITY - P(\u03C9)\n-------------------")
print("Class \u03C9\u2081 = " + str(class_1_probability))
print("Class \u03C9\u2082 = " + str(class_2_probability))
print("Class \u03C9\u2083 = " + str(class_3_probability))
print('')
print('-------------------------------------------------------------------------------------------------------------------------------------------------------------------------')

class_1_mean = np.array(np.mean(class_1))
class_2_mean = np.array(np.mean(class_2))
class_3_mean = np.array(np.mean(class_3))

print("MEAN - \u03BC\n--------")
print("Class \u03C9\u2081 = " + str(class_1_mean))
print("Class \u03C9\u2082 = " + str(class_2_mean))
print("Class \u03C9\u2083 = " + str(class_3_mean))
print('')
print('-------------------------------------------------------------------------------------------------------------------------------------------------------------------------')

class_1_covariance_matrix = class_1.cov()
class_2_covariance_matrix = class_2.cov()
class_3_covariance_matrix = class_3.cov()


print("COVARIANCE - \u03A3\n--------------")
print("Class \u03C9\u2081 :\n" + str(class_1_covariance_matrix.values))
print('')
print("Class \u03C9\u2082 :\n" + str(class_2_covariance_matrix.values))
print('')
print("Class \u03C9\u2083 :\n" + str(class_3_covariance_matrix.values))
print('')
print('-------------------------------------------------------------------------------------------------------------------------------------------------------------------------')

from sympy import Matrix, solve, symbols, simplify

x, y = symbols('x y')

X = Matrix([x, y])

X

# Function to get the expression for gi(X)
def get_gi_X(X, mean, covariance_matrix, probability):
    
    temp_1 = np.subtract(X, mean)
    temp_2 = (-1/2) * (np.transpose(temp_1)) @ (np.linalg.inv(covariance_matrix)) @ (temp_1)
    temp_3 = (-1/2) * (np.log(np.linalg.det(covariance_matrix)))
    temp_4 = np.log(probability)
    return simplify(temp_2 + temp_3 + temp_4)

g1_X = get_gi_X(X, class_1_mean.reshape(2,1), class_1_covariance_matrix, class_1_probability)
g2_X = get_gi_X(X, class_2_mean.reshape(2,1), class_2_covariance_matrix, class_2_probability)
g3_X = get_gi_X(X, class_3_mean.reshape(2,1), class_3_covariance_matrix, class_3_probability)

print("DISCRIMINANT FUNCTIONS\n----------------------")
print("g\u2081(X) = " + str(g1_X[0][0]))
print('')
print("g\u2082(X) = " + str(g2_X[0][0]))
print('')
print("g\u2083(X) = " + str(g3_X[0][0]))
print('')
print('-------------------------------------------------------------------------------------------------------------------------------------------------------------------------')

def get_g_X(g1_X, g2_X):
    return simplify(np.subtract(g1_X, g2_X))

g_X_1 = get_g_X(g1_X[0][0], g2_X[0][0])
g_X_2 = get_g_X(g1_X[0][0], g3_X[0][0])
g_X_3 = get_g_X(g2_X[0][0], g3_X[0][0])

print("\ng(X) = g\u2081(X) - g\u2082(X) = " + str(g_X_1))
print('')
print("\ng(X) = g\u2081(X) - g\u2083(X) = " + str(g_X_2))
print('')
print("\ng(X) = g\u2082(X) - g\u2083(X) = " + str(g_X_3))
print('')
print('-------------------------------------------------------------------------------------------------------------------------------------------------------------------------')

decision_boundary_solution_1 = solve(g_X_1, (x, y))
decision_boundary_solution_2 = solve(g_X_2, (x, y))
decision_boundary_solution_3 = solve(g_X_3, (x, y))

print("\nSolution to the Equation g(X) = g\u2081(X) - g\u2082(X) = " + str(decision_boundary_solution_1[0]) + "")
print("\nSolution to the Equation g(X) = g\u2081(X) - g\u2083(X) = " + str(decision_boundary_solution_2[0]) + "")
print("\nSolution to the Equation g(X) = g\u2082(X) - g\u2083(X) = " + str(decision_boundary_solution_3[0]) + "\n")

y1 = solve(-0.745885220950602*y**2 - 0.0565848556858366*y + 1 >= 0)
y2 = solve(-0.875278318788827*y**2 - 0.0801996077351771*y + 1 >= 0)
y3 = solve(-0.101690645131938*y**2 - 0.409414614219551*y + 1 >= 0)

print(y1)
print('')
print(y2)
print('')
print(y3)
print('')
print('-------------------------------------------------------------------------------------------------------------------------------------------------------------------------')

import matplotlib.pyplot as plt

"""Code for plotting the points and the decision boundary"""

# Generatinging points for drawing the decision boundary
y_values_1 = np.linspace(-1.19643366797726, 1.12057098281275, 1000000)
y_values_2 = np.linspace(-1.1156701400208, 1.02404259023052, 1000000)
y_values_3 = np.linspace(-5.73944215181265, 1.71336272544695, 1000000)

# Data points of Class 1, Class 2 and Class 3
plt.scatter(x = class_1['petal.length'], y = class_1['petal.width'], label = "Class $\u03C9_{1}$", color = 'blue')
plt.scatter(x = class_2['petal.length'], y = class_2['petal.width'], label = "Class $\u03C9_{2}$", color = 'cyan')
plt.scatter(x = class_3['petal.length'], y = class_3['petal.width'], label = "Class $\u03C9_{3}$", color = 'red')

# Mean of Class 1, Class 2 and Class 3
plt.scatter(x = class_1_mean[0], y = class_1_mean[1], label = "Mean - Class $\u03C9_{1}$", color = 'orange')
plt.scatter(x = class_2_mean[0], y = class_2_mean[1], label = "Mean - Class $\u03C9_{2}$", color = 'purple')
plt.scatter(x = class_3_mean[0], y = class_3_mean[1], label = "Mean - Class $\u03C9_{3}$", color = 'yellow')


# Plotting the Decision Boundaries
plt.plot(-0.0729508940948392*y_values_1 - 1.33919779811689*(np.sqrt(-0.745885220950602*y_values_1**2 - 0.0565848556858366*y_values_1 + 1)) + 1.11510452422751, y_values_1, linestyle = '-', label = 'Decision Boundary 1', color = 'green')
plt.plot(-0.0729508940948392*y_values_1 + 1.33919779811689*(np.sqrt(-0.745885220950602*y_values_1**2 - 0.0565848556858366*y_values_1 + 1)) + 1.11510452422751, y_values_1, linestyle = '-', color = 'green')

plt.plot(0.535501231261874*y_values_2 - 1.61558673547117*(np.sqrt(-0.875278318788827*y_values_2**2 - 0.0801996077351771*y_values_2 + 1)) + 1.00988637406934, y_values_2, linestyle = '-', label = 'Decision Boundary 2', color = 'brown')
plt.plot(0.535501231261874*y_values_2 + 1.61558673547117*(np.sqrt(-0.875278318788827*y_values_2**2 - 0.0801996077351771*y_values_2 + 1)) + 1.00988637406934, y_values_2, linestyle = '-', color = 'brown')

plt.plot(2.4140475008826*y_values_3 - 2.29591620046276*(np.sqrt(-0.101690645131938*y_values_3**2 - 0.409414614219551*y_values_3 + 1)) + 0.685033924322147, y_values_3, linestyle = '-', label = 'Decision Boundary 3', color = 'pink')
plt.plot(2.4140475008826*y_values_3 + 2.29591620046276*(np.sqrt(-0.101690645131938*y_values_3**2 - 0.409414614219551*y_values_3 + 1)) + 0.685033924322147, y_values_3, linestyle = '-', color = 'pink')

plt.xlabel('Petal Length (in cm)')
plt.ylabel('Petal Width (in cm)')

plt.legend(loc = 'upper left')
plt.show()
